<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="FlaUILibrary" type="LIBRARY" format="ROBOT" scope="GLOBAL" namedargs="true" generated="2021-02-02T20:33:50Z" specversion="2" source="C:\projects\robotframework-flaui\src\FlaUILibrary\__init__.py" lineno="25">
<version>1.3.6</version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>FlaUILibrary is a Robot Framework library for automating Windows GUI.

It is a wrapper for [https://github.com/Roemer/FlaUI | FlaUI] automation framework, which is based based on
native UI Automation libraries from Microsoft and therefore kind of a wrapper around them.

= Getting started =

FlaUILibrary uses XPath item identifiers to gain access to user interface components like windows, buttons, textbox
etc.

== Library screenshot usage ==

FlaUiLibrary contains by default a automatic snapshot module which creates for each error case a snapshot from a
attached element or desktop. To disable this feature use Library  screenshot_enabled=False.

Following settings could be used for library init.

Library  screenshot_enabled=&lt;True/False&gt;  screenshot_dir=&lt;PATH_TO_STORE_IMAGES&gt;

== XPath locator ==

An XPath is a tree overview from all active module application like a Taskbar or Windows (Outlook, Security Client).
FlaUILibrary supports to interact with this XPath to select this module components by a AutomationId, Name,
ClassName or HelpText.

XPath identifier usage examples:
| = Attribute = | = Description = | = Example = |
| AutomationId  | Search for element with given automation id | /MenuBar/MenuItem[@AutomationId='&lt;ID&gt;'] |
| Name  | Search for element with given name | /MenuBar/MenuItem[@Name='&lt;NAME&gt;'] |
| ClassName  | Search for element with given class type | /MenuBar/MenuItem[@ClassName='&lt;CLASS_NAME&gt;'] |
| HelpText  |  Search for element with given help text | /MenuBar/MenuItem[@HelpText='&lt;HELP_TEXT&gt;'] |

For FlaUI there is a inspector tool [https://github.com/FlauTech/FlaUInspect | FlaUI Inspect] to verify an XPath
from all visible UI components. Download the latest release and set UIA3 Mode and enable 'Show XPath' under mode.</doc>
<init lineno="88">
<arguments>
<arg>uia=UIA3</arg>
<arg>screenshot_on_failure=True</arg>
<arg>screenshot_dir=None</arg>
</arguments>
<doc>FlaUiLibrary can be imported by following optional arguments:

``uia`` Microsoft UI-Automation framework to use. UIA2 or UIA3
``screenshot_on_failure`` indicator to disable or enable screenshot feature.
``screenshot_dir`` is the directory where screenshots are saved.

If the given directory does not already exist, it will be created when the first screenshot is taken.
If the argument is not given, the default location for screenshots is the output directory of the Robot run,
i.e. the directory where output and log files are generated.</doc>
</init>
<kw name="Attach Application By Name">
<arguments>
<arg>name</arg>
<arg>msg=None</arg>
</arguments>
<doc>Attach to an running application by name.

If application with name not exists an error message will be thrown.

Arguments:
| Argument   | Type   | Description            |
| name       | string | Process name to attach |
| msg        | string | Custom error message   |

Examples:
| Attach Application By Name  &lt;APPLICATION&gt;                     |
| Attach Application By Name  &lt;APPLICATION&gt;  You shall not pass |</doc>
</kw>
<kw name="Attach Application By Pid">
<arguments>
<arg>pid</arg>
<arg>msg=None</arg>
</arguments>
<doc>Attach to an running application by pid.

If application with pid not exists an error message will be thrown.

Arguments:
| Argument   | Type   | Description                  |
| pid        | number | Process identifier to attach |
| msg        | string | Custom error message         |

Examples:
| Attach Application By PID  &lt;PID_NUMBER&gt;                     |
| Attach Application By PID  &lt;PID_NUMBER&gt;  You shall not pass |</doc>
</kw>
<kw name="Click">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Left click to element by an XPath.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Examples:
| Click  &lt;XPATH&gt; |</doc>
</kw>
<kw name="Close Application">
<arguments>
<arg>msg=None</arg>
</arguments>
<doc>Closes the attached application.

If no application is attached an error message will be thrown.

Arguments:
| Argument   | Type   | Description          |
| msg        | string | Custom error message |

Examples:
| Launch Application  &lt;APPLICATION&gt; |
| Close Application                 |</doc>
</kw>
<kw name="Close Window">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Try to close window from element.

Arguments:
| Argument   | Type   | Description                             |
| identifier | string | XPath identifier from element to search |
| msg        | string | Custom error message                    |

Example:
| Launch Application  &lt;APPLICATION&gt;           |
| Close Window  &lt;XPATH_TO_APPLICATION_WINDOW&gt; |</doc>
</kw>
<kw name="Combobox Should Contain">
<arguments>
<arg>identifier</arg>
<arg>name</arg>
<arg>msg=None</arg>
</arguments>
<doc>Checks if Combobox contains an item

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| name       | string | Name from item                |
| msg        | string | Custom error message          |

Examples:
| Combobox Should Contain  &lt;XPATH&gt;  &lt;NAME&gt; |</doc>
</kw>
<kw name="Double Click">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Double click to element.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Examples:
| Double Click  &lt;XPATH&gt; |</doc>
</kw>
<kw name="Element Should Be Visible">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Checks if element is visible.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Example:
|Element Should Be Visible  &lt;XPATH&gt; |</doc>
</kw>
<kw name="Element Should Exist">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Checks if element exists. If element exists True will be returned otherwise False.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Example:
| Element Should Exist  &lt;XPATH&gt; |</doc>
</kw>
<kw name="Element Should Not Be Visible">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Checks if element is visible.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Example:
|Element Should Not Be Visible  &lt;XPATH&gt; |</doc>
</kw>
<kw name="Element Should Not Exist">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Checks if element exists. If element exists False will be returned otherwise True.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Example:
| Element Should Exist  &lt;XPATH&gt; |</doc>
</kw>
<kw name="Focus">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Try to focus element by given xpath.

XPath syntax is explained in `XPath locator`.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Example:
| Focus  &lt;XPATH&gt;  |</doc>
</kw>
<kw name="Get Checkbox State">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Return actual checked state ${True} or ${False} from checkbox.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Examples:
| ${value}  Get Checkbox State  &lt;XPATH&gt; |
| Should Be Equal  ${value}  ${False/True} |

Returns:
| &lt;True&gt; if checkbox is set otherwise &lt;False&gt; |</doc>
</kw>
<kw name="Get Childs From Element">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Gets full output from element and childs output. Information to print out are AutomationId, Name,
ControlType and FrameworkId.

Example output ${CHILDS}  &lt;XPATH&gt;:
  AutomationId:, Name:Warning, ControlType:dialog, FrameworkId:Win32
  ------&gt; AutomationId:, Name:Warning, ControlType:pane, FrameworkId:Win32
  ------&gt; AutomationId:1002, Name:, ControlType:document, FrameworkId:Win32
  ------&gt; AutomationId:1, Name:OK, ControlType:button, FrameworkId:Win32
  ------&gt; AutomationId:1009, Name:Do not display further messages, ControlType:check box, FrameworkId:Win32
  ------&gt; AutomationId:1011, Name:Web protection, ControlType:text, FrameworkId:Win32

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Examples:
| ${CHILDS}  Get Child From Element  &lt;XPATH&gt; |
| Log  &lt;XPATH&gt; |</doc>
</kw>
<kw name="Get Combobox Items Count">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Return actual count of items in combobox.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Examples:
| ${COUNT}  Get Combobox Items Count  &lt;XPATH&gt; |
| Should Be Equal  ${value}  ${COUNT}         |</doc>
</kw>
<kw name="Get Grid Rows Count">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Return count of rows from data grid.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Examples:
| ${COUNT}  Get Grid Rows Count  &lt;XPATH&gt; |
| Should Be Equal  ${COUNT}  &lt;VALUE_TO_COMPARE&gt; |</doc>
</kw>
<kw name="Get Listbox Items Count">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Return count of rows in listbox.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Examples:
| ${COUNT}  Get Listbox Items Count  &lt;XPATH&gt;  |
| Should Be Equal  ${COUNT}  &lt;VALUE_TO_COMPARE&gt; |</doc>
</kw>
<kw name="Get Name From Element">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Return name value from element.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Examples:
| ${NAME}  Get Name From Element  &lt;XPATH&gt; |

Returns:
| Name from element if set otherwise empty string |</doc>
</kw>
<kw name="Get Radiobutton State">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Return actual  state ${True} or ${False} from radiobutton.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Examples:
| ${value}  Get Radiobutton State &lt;XPATH&gt; |
| Should Be Equal  ${value}  ${False/True} |</doc>
</kw>
<kw name="Get Selected Grid Rows">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Get all selected rows as string. Representation for each cell is a pipe. If nothing is selected empty string
will be returned.

For example:
  | Value_1 | Value_2 | Value_3 |

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Examples:
| ${data}  Get Selected Grid Rows  &lt;XPath&gt;   |</doc>
</kw>
<kw name="Get Selected Items From Combobox">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Get all selected items from combobox as string. If nothing is selected empty string  will be returned.

For example:
  Value_1
  Value_2

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Examples:
| ${data}  Get Selected Items From Combobox  &lt;XPath&gt;   |</doc>
</kw>
<kw name="Get Tab Items Names">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Return child TabItems names from the parent Tab element.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Examples:
| @{CHILD_TAB_ITEMS}  Get Tab Items Names  &lt;XPATH&gt; |

Returns:
| List&lt;String&gt; child TabItem elements names from the Tab element. |</doc>
</kw>
<kw name="Get Text From Textbox">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Return text from textbox element.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| name       | string | XPath identifier from element |
| msg        | string | Custom error message          |

Examples:
| ${TEXT}  Get Text From Textbox  &lt;XPATH&gt; |

Returns:
| Text string from textbox |</doc>
</kw>
<kw name="Get Uia Identifier">
<arguments>
</arguments>
<doc>Gets given windows user automation identifier which is in usage for the test.

Possible Identifier are : UIA2 or UIA3

Examples:
| ${IDENTIFIER}  Get UIA Identifier  |
| Log  &lt;IDENTIFIER&gt; |</doc>
</kw>
<kw name="Is Element Enabled">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Verifies if element is enabled (true) or not (false).

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Example:
| ${IS_ENABLED} =  Is Item Enabled &lt;XPATH&gt; |

Returns:
| &lt;True&gt; if element is enabled otherwise &lt;False&gt; |</doc>
</kw>
<kw name="Is Element Visible">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Checks if element is visible (true) or not (false).

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Example:
|${IS_VISIBLE}  Is Element Visible  &lt;XPATH&gt; |</doc>
</kw>
<kw name="Launch Application">
<arguments>
<arg>application</arg>
<arg>msg=None</arg>
</arguments>
<doc>Launches an application.

If application could not be found an error message will be thrown.

Arguments:
| Argument    | Type   | Description                                        |
| application | string | Relative or absolute path to executable to launch  |
| msg         | string | Custom error message                               |

Examples:
| Launch Application  &lt;APPLICATION&gt; |

Returns:
| Process id from started process if successfully |</doc>
</kw>
<kw name="Listbox Selection Should Be">
<arguments>
<arg>identifier</arg>
<arg>item</arg>
<arg>msg=None</arg>
</arguments>
<doc>Checks if the selected listbox items are same with the given ones.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type            | Description                   |
| identifier | string          | XPath identifier from element |
| item       | several strings | Name of items                 |
| msg        | string | Custom error message                   |

Examples:
| Listbox Selection Should Be &lt;XPATH&gt;  &lt;STRING&gt;                |</doc>
</kw>
<kw name="Listbox Should Contain">
<arguments>
<arg>identifier</arg>
<arg>name</arg>
<arg>msg=None</arg>
</arguments>
<doc>Checks if listbox contains the given item.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| name       | string | Name of item                  |
| msg        | string | Custom error message          |

Examples:
| Listbox Should Contain &lt;XPATH&gt;  &lt;STRING&gt; |</doc>
</kw>
<kw name="Move To">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Move mouse cursor to given element.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Examples:
| Move To  &lt;XPATH&gt; |</doc>
</kw>
<kw name="Name Contains Text">
<arguments>
<arg>name</arg>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Verifies if element name contains to name.

Arguments:
| Argument   | Type   | Description                   |
| name       | string | Name to compare               |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Example:
| Name Contains Text  &lt;NAME&gt;  &lt;XPATH&gt; |</doc>
</kw>
<kw name="Name Should Be">
<arguments>
<arg>name</arg>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Verifies if name from element is equal.

Arguments:
| Argument   | Type   | Description                   |
| name       | string | Name to compare               |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

 Example:
| Name Should Be  &lt;NAME&gt;  &lt;XPATH&gt; |</doc>
</kw>
<kw name="Press Keys">
<arguments>
<arg>keys_combination</arg>
<arg>identifier=None</arg>
<arg>msg=None</arg>
</arguments>
<doc>Keyboard control to execute a user defined sequence of shortcuts and text values.
If identifier set try to attach to given element if
operation was successfully old element will be reattached automatically.

Arguments:
| Argument         | Type                                  | Description                   |
| keys_combination | List of Strings, which should         | Text to be typed by keyboard  |
|                  | satisfy one of the following formats: |                               |
|                  |    - s'&lt;shortcut&gt;'                    |                               |
|                  |    - t'&lt;text&gt;'                        |                               |
|                  |    Examples:                          |                               |
|                  |    - s'CTRL+A'                        |                               |
|                  |    - t'JJJ'                           |                               |
|                  |    - s'JJJ' will be executed as text  |                               |
| identifier       | String *Optional                      | Optional XPath identifier     |
| msg              | String *Optional                      | Custom error message          |

XPath syntax is explained in `XPath locator`.

The following keys are supported for usage as a part of key_combination:
| LBUTTON     |     Left mouse button                           |
| RBUTTON     |     Right mouse button                          |
| CANCEL      |     Control-break processing                    |
| MBUTTON     |     Middle mouse button (three-button mouse)    |
| XBUTTON1    |     Windows 2000/XP: X1 mouse button            |
| XBUTTON2    |     Windows 2000/XP: X2 mouse button            |
| BACK        |     BACKSPACE key                               |
| TAB         |     TAB key                                     |
| CLEAR       |     CLEAR key                                   |
| ENTER       |     ENTER key                                   |
| SHIFT       |     SHIFT key                                   |
| CTRL        |     CTRL key                                    |
| ALT         |     ALT key                                     |
| CAPITAL     |     CAPITAL key                                 |
| PAUSE       |     PAUSE key                                   |
| ESCAPE      |     ESC key                                     |
| ESC         |     ESC key                                     |
| SPACE       |     Blank space key                             |
| NEXT        |     Next key                                    |
| END         |     END key                                     |
| HOME        |     HOME key                                    |
| LEFT        |     LEFT ARROW key                              |
| RIGHT       |     RIGHT ARROW key                             |
| UP          |     UP ARROW key                                |
| DOWN        |     DOWN ARROW key                              |
| SELECT      |     SELECT key                                  |
| PRINT       |     PRINT key                                   |
| EXECUTE     |     EXEC key                                    |
| INSERT      |     INS key                                     |
| DELETE      |     DEL key                                     |
| HELP        |     HELP key                                    |
| 0 - 9       |                                                 |
| A - Z       |                                                 |
| F1 - F12    |                                                 |
| LWIN        |     Left Windows key                            |
| RWIN        |     Right Windows key                           |
| APPS        |                                                 |
| SLEEP       |                                                 |
| MULTIPLY    |     '*' key                                     |
| ADD         |     '+' key                                     |
| SEPARATOR   |                                                 |
| SUBTRACT    |                                                 |
| DECIMAL     |                                                 |
| DIVIDE      |                                                 |

Example:
| Press Keys  t'Example text'  s'CTRL+A'  s'CTRL+C'  ${textbox_xpath} |
| Press Keys  s'CTRL+A'  t'Overwrite text'                            |</doc>
</kw>
<kw name="Right Click">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Right click to element.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Examples:
| Right Click  &lt;XPATH&gt; |</doc>
</kw>
<kw name="Select Combobox Item By Index">
<arguments>
<arg>identifier</arg>
<arg>index</arg>
<arg>msg=None</arg>
</arguments>
<doc>Selects item from combobox with given index number

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| index      | string | index of item                 |
| msg        | string | Custom error message          |

Examples:
| Select Combobox Item By Index  &lt;XPATH&gt;  &lt;INDEX&gt; |</doc>
</kw>
<kw name="Select Grid Row By Index">
<arguments>
<arg>identifier</arg>
<arg>index</arg>
<arg>msg=None</arg>
</arguments>
<doc>Select rows from data grid with the given index.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| index      | string | IndexNumber                   |
| msg        | string | Custom error message          |

Examples:
| Select Grid Row By Index  &lt;XPath&gt;  &lt;INDEX&gt;      |</doc>
</kw>
<kw name="Select Grid Row By Name">
<arguments>
<arg>identifier</arg>
<arg>index</arg>
<arg>name</arg>
<arg>msg=None</arg>
</arguments>
<doc>Select specific row by name from data grid.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| index      | string | Column IndexNumber            |
| name       | string | Column items Name             |
| msg        | string | Custom error message          |

Examples:
| Select Grid Row By Name  &lt;XPath&gt;  &lt;INDEX&gt;      |</doc>
</kw>
<kw name="Select Listbox Item By Index">
<arguments>
<arg>identifier</arg>
<arg>index</arg>
<arg>msg=None</arg>
</arguments>
<doc>Selects item from combobox with given index number

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| index      | string | index of item                 |
| msg        | string | Custom error message          |

Examples:
| Select Listbox Item By Index  &lt;XPATH&gt;  &lt;INDEX&gt;      |</doc>
</kw>
<kw name="Select Radiobutton">
<arguments>
<arg>identifier</arg>
<arg>msg=None</arg>
</arguments>
<doc>Select given radiobutton by xpath.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| msg        | string | Custom error message          |

Examples:
| Select Radiobutton  &lt;XPATH&gt; |</doc>
</kw>
<kw name="Select Tab Item By Name">
<arguments>
<arg>identifier</arg>
<arg>name</arg>
<arg>msg=None</arg>
</arguments>
<doc>Return child TabItems names from the parent Tab element.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| name       | string | Name from tab to select       |
| msg        | string | Custom error message          |

Examples:
| Select Tab Item By Name  &lt;XPATH&gt;  &lt;NAME&gt; |</doc>
</kw>
<kw name="Set Checkbox State">
<arguments>
<arg>identifier</arg>
<arg>value</arg>
<arg>msg=None</arg>
</arguments>
<doc>Set checkbox state to ${True} or ${False}

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from element |
| enable     | bool   | ${True} / ${False}            |
| msg        | string | Custom error message          |

Examples:
| Set Checkbox State  &lt;XPATH&gt;  ${True/False} |</doc>
</kw>
<kw name="Set Screenshot Directory">
<arguments>
<arg>directory=None</arg>
</arguments>
<doc>Set directory for captured images. If no directory is set default output directory will be used from robot.

Arguments:
| Argument   | Type   | Description                                  |
| directory | string | Relative or absolute path to directory folder |</doc>
</kw>
<kw name="Set Text To Textbox">
<arguments>
<arg>identifier</arg>
<arg>value</arg>
<arg>msg=None</arg>
</arguments>
<doc>Inputs value to a textbox module.

XPath syntax is explained in `XPath locator`.

If element could not be found by xpath an error message will be thrown.

Arguments:
| Argument   | Type   | Description                   |
| identifier | string | XPath identifier from textbox |
| value      | string | Value to set to textbox       |
| msg        | string | Custom error message          |

Examples:
| Set Text To Textbox  &lt;XPATH&gt;  &lt;VALUE&gt; |</doc>
</kw>
<kw name="Take Screenshot">
<arguments>
</arguments>
<doc>Takes a screenshot of the whole desktop. Returns path to the screenshot file.

Example:
| Take Screenshot (Takes screenshot from all desktops) |</doc>
</kw>
<kw name="Take Screenshots On Failure">
<arguments>
<arg>enabled</arg>
</arguments>
<doc>Takes a screenshot of the whole desktop if no element is attached otherwise
    attached element will be captured. Returns path to the screenshot file.

Arguments:
| Argument   | Type   | Description      |
| enabled    | string | True or False    |</doc>
</kw>
<kw name="Wait Until Element Is Hidden">
<arguments>
<arg>identifier</arg>
<arg>timeout=10</arg>
<arg>msg=None</arg>
</arguments>
<doc>Waits until element is hidden or timeout was reached. If timeout was reached an FlaUIError occurred.
Checks if element exists before Wait Until Element Is Hidden is called.

XPath syntax is explained in `XPath locator`.

Arguments:
| Argument   | Type   | Description                                                       |
| identifier | string | XPath identifier from element                                     |
| timeout    | number | Maximum amount of time in seconds to wait. By default 10 seconds. |
| msg        | string | Custom error message                                              |

Example:
| Wait Until Element Is Hidden  &lt;XPATH&gt;  &lt;TIMEOUT=10&gt; |
| Wait Until Element Is Hidden  &lt;XPATH&gt;  &lt;TIMEOUT=10&gt;  &lt;MSG&gt; |</doc>
</kw>
</keywordspec>
